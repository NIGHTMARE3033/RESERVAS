/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Datos.Pacientes;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTextField;



/**
 *
 * @author Administrador
 */
public class ReservaHora extends javax.swing.JDialog {
   
    /**
     * Creates new form ReservaHora
     */
    //formato fecha normal
    Date fechaActual = new Date();
    SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
    String resultado = formato.format(fechaActual);
    
    //formato para el año
    Date fechaActualAno = new Date();
    SimpleDateFormat fano = new SimpleDateFormat ("yyyy");
    String rano = fano.format(fechaActualAno);
    
    int anoActual = (Integer.parseInt(rano));
       // System.out.println(anoActual);
    
    //forrmato para el mes
    Date fechaActualMes = new Date();
    SimpleDateFormat fMes = new SimpleDateFormat("MM");
    String rmes = fMes.format(fechaActualMes);
    
    int mesActual = (Integer.parseInt(rmes));   
    
    
    //formato para el dia
    Date fechaActualDia = new Date();
    SimpleDateFormat fdia = new SimpleDateFormat ("dd");
    String rdia = fdia.format(fechaActualDia);
    
    int diaActual = (Integer.parseInt(rdia));
    
    public ReservaHora()
    {
        initComponents();
        this.setLocationRelativeTo(null);
        this.txtfecha.setText(resultado);       
              
         for (int x=anoActual; x <= 2023; x++){
            this.cmbAno.addItem(x);              
         }
         for (int y=1; y <= 12; y++){
             this.cmbMes.addItem(y);            
         }
         for (int z=1; z <= 31; z++){
             this.cmbDia.addItem(z);            
         }   
         
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNombre = new javax.swing.JTextField();
        txtRun = new javax.swing.JTextField();
        btnReservarHora = new javax.swing.JButton();
        lblFormularioPaciente = new javax.swing.JLabel();
        lblRun = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblApellidos = new javax.swing.JLabel();
        cmbMedico = new javax.swing.JComboBox();
        lblHoraReserva = new javax.swing.JLabel();
        cmbHoraReserva = new javax.swing.JComboBox();
        txtTelefono = new javax.swing.JTextField();
        cmbEspecialidad = new javax.swing.JComboBox();
        lblMedico = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        lblTelefono = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        lblEspecialidad = new javax.swing.JLabel();
        btnConsultar = new javax.swing.JButton();
        txtDigitoVer = new javax.swing.JTextField();
        lblNombres = new javax.swing.JLabel();
        btnNuevo = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        txtfecha = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        cmbDia = new javax.swing.JComboBox();
        cmbMes = new javax.swing.JComboBox();
        cmbAno = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ingreso de Horas");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtRun.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRunKeyTyped(evt);
            }
        });

        btnReservarHora.setText("Reservar Hora");
        btnReservarHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservarHoraActionPerformed(evt);
            }
        });

        lblFormularioPaciente.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        lblFormularioPaciente.setText("Formulario Reserva Horas");

        lblRun.setText("Rut");

        jLabel1.setText("Fecha Reserva");

        lblApellidos.setText("Apellidos");

        cmbMedico.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));
        cmbMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMedicoActionPerformed(evt);
            }
        });

        lblHoraReserva.setText("Hora Reserva");

        cmbHoraReserva.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "09:00", "10:00", "11:00", "12:00", "13:00", "15:00", "16:00", "17:00" }));
        cmbHoraReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHoraReservaActionPerformed(evt);
            }
        });

        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        cmbEspecialidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Oftalmología", "Odontología", "Cardiología", "Kinesiología", "Nutricionista", "Medicina General" }));
        cmbEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEspecialidadActionPerformed(evt);
            }
        });

        lblMedico.setText("Médico");

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblTelefono.setText("Teléfono");

        txtApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosKeyTyped(evt);
            }
        });

        lblEspecialidad.setText("Especialidad");

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        txtDigitoVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDigitoVerActionPerformed(evt);
            }
        });
        txtDigitoVer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDigitoVerKeyTyped(evt);
            }
        });

        lblNombres.setText("Nombres");

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 2, 12)); // NOI18N
        jLabel3.setText("Reserva Horas Medicas V 1.0");

        txtfecha.setEditable(false);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        cmbDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "..." }));
        cmbDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDiaActionPerformed(evt);
            }
        });

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "..." }));
        cmbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesActionPerformed(evt);
            }
        });

        cmbAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));
        cmbAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReservarHora)
                            .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(155, 155, 155)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblHoraReserva)
                                                .addComponent(jLabel1)
                                                .addComponent(lblMedico)
                                                .addComponent(lblEspecialidad))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblFormularioPaciente)
                                                .addGap(14, 14, 14))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblNombres)
                                            .addComponent(lblRun)
                                            .addComponent(lblApellidos)
                                            .addComponent(lblTelefono))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtRun, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDigitoVer, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtNombre)
                                            .addComponent(txtApellidos)
                                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(123, 123, 123)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbMedico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cmbHoraReserva, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(cmbEspecialidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(198, 198, 198)
                                .addComponent(txtfecha, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtfecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFormularioPaciente)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEspecialidad)
                            .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRun)
                            .addComponent(txtDigitoVer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombres)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMedico))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblApellidos)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTelefono)
                            .addComponent(cmbHoraReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHoraReserva))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevo)
                    .addComponent(btnEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReservarHora)
                    .addComponent(btnConsultar)
                    .addComponent(btnSalir))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private ArrayList<Pacientes> listado = new ArrayList();  
   
    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if(this.txtNombre.getText().trim().length()> 30)
        {
            evt.consume();
           
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtRunKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRunKeyTyped
        if(evt.getKeyChar() <'0' || evt.getKeyChar() > '9'){
            evt.consume();
        }
        else
        {

            if(this.txtRun.getText().trim().length() > 7)
            {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtRunKeyTyped

    
    private void btnReservarHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservarHoraActionPerformed
        //verificar que los datos esten ingresados
       
        if(this.txtRun.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                "Debe ingresar el Rut",
                "Error de Ingreso",
                JOptionPane.ERROR_MESSAGE);            
            this.txtRun.requestFocus();
            return;
        }
        if(this.txtDigitoVer.getText().trim().isEmpty())
        {           
            JOptionPane.showMessageDialog(this,
                "Debe ingresar el digito verificador",
                "Error de Ingreso",
                JOptionPane.ERROR_MESSAGE);
            this.txtDigitoVer.requestFocus();           
            return;
        }
         if (this.validarRut() == false) {
          JOptionPane.showMessageDialog(this, "Rut Incorrecto",
                "Error de Ingreso",
               JOptionPane.ERROR_MESSAGE);
            this.txtRun.requestFocus();
           return;
        }
        if(this.txtNombre.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                "Debe Ingresar Nombres",
                "Error de Ingreso",
                JOptionPane.ERROR_MESSAGE);
            this.txtNombre.requestFocus();
            return;
        }
        if(this.txtApellidos.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                "Debe Ingresar Apellidos",
                "Error de Ingreso",
                JOptionPane.ERROR_MESSAGE);
            this.txtApellidos.requestFocus();
            return;
        }
        if(this.txtTelefono.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                "Debe Ingresar Telefono",
                "Error de Ingreso",
                JOptionPane.ERROR_MESSAGE);
            this.txtTelefono.requestFocus();
            return;

        }
        if (this.cmbEspecialidad.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                "Debe seleccionar la Especialidad",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbEspecialidad.requestFocus();
            return;
        }
        if (this.cmbMedico.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                "Debe seleccionar el Medico",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbMedico.requestFocus();
            return;
        }     
        if (this.cmbAno.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                "Debe seleccionar el Año",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbAno.requestFocus();
            return;
        } 
       if (this.cmbMes.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                "Debe seleccionar el Mes",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbMes.requestFocus();
            return;
        }
       if (this.cmbDia.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                "Debe seleccionar el Dia",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbDia.requestFocus();
            return;
        } 
       
       //Validacion de Ingreso de Mes y Dias
       int Ano = ((this.cmbAno.getSelectedItem()).hashCode());
       int Mes = ((this.cmbMes.getSelectedItem()).hashCode());
       int Dia = ((this.cmbDia.getSelectedItem()).hashCode());
       
          if ( Ano == anoActual && Mes < mesActual){
              JOptionPane.showMessageDialog(this,
                "El Mes Seleccionado es Inferior al Actual",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbMes.requestFocus();
            return;
              
          }
          if ( Ano == anoActual && Mes == mesActual && Dia < diaActual){
              JOptionPane.showMessageDialog(this,
                "El dia Seleccionado es Inferior al Actual",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbMes.requestFocus();
            return;
              
          }
          
          if ((Mes == 2 || Mes == 4 || Mes == 6 || Mes == 9 || Mes == 11) && (Dia > 30) ){
                   JOptionPane.showMessageDialog(this,
                           "Este Día no existe","Error de Ingreso",
                           JOptionPane.ERROR_MESSAGE);
                   this.cmbDia.requestFocus();
                   return;
               }
          if ((Mes == 2 || Mes == 4 || Mes == 6 || Mes == 9 || Mes == 11) && (Dia > 30) ){
                   JOptionPane.showMessageDialog(this,
                           "Este Día no existe","Error de Ingreso",
                           JOptionPane.ERROR_MESSAGE);
                   this.cmbDia.requestFocus();
                   return;
               }
          if (((Mes == 2) && (Dia == 30))){
              JOptionPane.showMessageDialog(this,
                           "Este Día no existe","Error de Ingreso",
                           JOptionPane.ERROR_MESSAGE);
                   this.cmbDia.requestFocus();
                   return;
          }
          if ((Ano % 4 == 0)&&((Ano % 100 != 0) || (Ano % 400 == 0)) && ((Mes == 2) && (Dia == 29))){
              
                   this.cmbHoraReserva.requestFocus();                
          } else{
              if ((Mes == 2) && (Dia == 29)){
                 JOptionPane.showMessageDialog(this,
                           "Este Día no existe","Error de Ingreso",
                           JOptionPane.ERROR_MESSAGE);
                   this.cmbDia.requestFocus();
                   return; 
              }
          } 
                          
        if (this.cmbHoraReserva.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                "Debe seleccionar la Hora",
                "Error de Seleccion",
                JOptionPane.ERROR_MESSAGE);
            this.cmbHoraReserva.requestFocus();
            return;
        } 
        if(actualizarHora() == true)
        {
            JOptionPane.showMessageDialog(this,
                           "Esta Hora ya esta tomada","Error de Ingreso",
                           JOptionPane.ERROR_MESSAGE);
               this.cmbHoraReserva.requestFocus();
        }
        else        
            if (siExisteReserva() == true){
                JOptionPane.showMessageDialog(this,
                           "Este Rut Ya Fue Ingresado","Error de Ingreso",
                           JOptionPane.ERROR_MESSAGE);
               this.cmbHoraReserva.requestFocus();
               
        }else{
        reservahora();    
        }

    }//GEN-LAST:event_btnReservarHoraActionPerformed

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        if(evt.getKeyChar() <'0' || evt.getKeyChar() > '9'){
            evt.consume();
        }
        else
        {

            if(this.txtTelefono.getText().trim().length() > 7)
            {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void cmbEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEspecialidadActionPerformed

         switch(this.cmbEspecialidad.getSelectedIndex())
        {
            case 1: this.cmbMedico.removeAllItems();
                    this.cmbMedico.addItem("Seleccione...");
                    this.cmbMedico.addItem("Juan Perez");
                    this.cmbMedico.addItem("Rosamel Fierro");
                break;
            case 2: this.cmbMedico.removeAllItems();
                    this.cmbMedico.addItem("Seleccione...");
                    this.cmbMedico.addItem("Aquiles Castro");
                    this.cmbMedico.addItem("Mari Conde Plaza");                    
                break;
            case 3: this.cmbMedico.removeAllItems();
                    this.cmbMedico.addItem("Seleccione...");
                    this.cmbMedico.addItem("Julio Moreno");
                break;
            case 4: this.cmbMedico.removeAllItems();
                    this.cmbMedico.addItem("Seleccione...");
                    this.cmbMedico.addItem("Mauricio Hernández");
                    this.cmbMedico.addItem("José Huenul");
                break;    
            case 5: this.cmbMedico.removeAllItems();
                    this.cmbMedico.addItem("Seleccione...");
                    this.cmbMedico.addItem("Roberto Quiroz");
                    this.cmbMedico.addItem("Patricio Arce");
                break;   
            case 6: this.cmbMedico.removeAllItems();
                    this.cmbMedico.addItem("Seleccione...");
                    this.cmbMedico.addItem("Barbara Straisand");
                    this.cmbMedico.addItem("Alejandro Abarca");
                break;    
                    
        }
        
    }//GEN-LAST:event_cmbEspecialidadActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        int opcion = 0;
        opcion = JOptionPane.showConfirmDialog(this,
            "¿Desea Salir de la aplicacion?",
            "Salir de la Aplicacion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
        if(opcion == JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyTyped
        if(this.txtApellidos.getText().trim().length()>30)
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtApellidosKeyTyped

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
       ConsultaHoras pantalla = new ConsultaHoras(this.listado);
       pantalla.setVisible(true);
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void txtDigitoVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDigitoVerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDigitoVerActionPerformed

    private void txtDigitoVerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDigitoVerKeyTyped
        if(this.txtDigitoVer.getText().trim().length()> 0)
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtDigitoVerKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       int opcion = 0;
        opcion = JOptionPane.showConfirmDialog(this,
            "¿Desea Salir de la aplicacion?",
            "Salir de la Aplicacion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
        if(opcion == JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void cmbMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMedicoActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
             
        //Limpiar Cajas de texto
        limpiar();
        
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarReserva();
        limpiar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void cmbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesActionPerformed
        // TODO add your handling code here:         
    }//GEN-LAST:event_cmbMesActionPerformed

    private void cmbAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAnoActionPerformed
        // TODO add your handling code here:  
    }//GEN-LAST:event_cmbAnoActionPerformed

    private void cmbDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDiaActionPerformed
        // TODO add your handling code here:     
    }//GEN-LAST:event_cmbDiaActionPerformed

    private void cmbHoraReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHoraReservaActionPerformed
        // TODO add your handling code here:      
    }//GEN-LAST:event_cmbHoraReservaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservaHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservaHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservaHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservaHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReservaHora dialog = new ReservaHora();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReservarHora;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox cmbAno;
    private javax.swing.JComboBox cmbDia;
    private javax.swing.JComboBox cmbEspecialidad;
    private javax.swing.JComboBox cmbHoraReserva;
    private javax.swing.JComboBox cmbMedico;
    private javax.swing.JComboBox cmbMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblApellidos;
    private javax.swing.JLabel lblEspecialidad;
    private javax.swing.JLabel lblFormularioPaciente;
    private javax.swing.JLabel lblHoraReserva;
    private javax.swing.JLabel lblMedico;
    private javax.swing.JLabel lblNombres;
    private javax.swing.JLabel lblRun;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtDigitoVer;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRun;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtfecha;
    // End of variables declaration//GEN-END:variables
private boolean validarRut() {
    
    boolean valido = true;
        int suma = 0;
        int pond = 2;
        int resto = 0;
        int valor = 0;        
        String digito = "";
        int largo = this.txtRun.getText().trim().length();
        int ultimo = this.txtDigitoVer.getText().trim().length();
        
        for(int i=largo-1; i>-1; i--)
        {
            //System.out.println(this.txtRun.getText().trim().charAt(i));            
            suma = suma + (Integer.parseInt(""+this.txtRun.getText().trim().charAt(i)) * pond);
            pond++;
            if(pond > 7)
            {
                pond = 2;
            }
        }
        //System.out.println("suma: " + suma + "  "+ultimo);
        resto = suma % 11;
        valor = 11 - resto;    
        if(valor == 10)
        {
            digito = "K"; 
        }
        else
        {
            if (valor == 11)
            {
                digito = "0";               
            }
            else
            {
                digito = ""+ valor;                
            }
        }        
        if (digito.charAt(0) != this.txtDigitoVer.getText().trim().toUpperCase().charAt(0)){
            valido = false;
        }
            return valido;
        }   


private void reservahora(){
     //Crear objeto
    
    
    //this.setFechaReserva((String)sdf.format(formato));
    //String fechaReserva = this.fecha.getText().trim();
    String fechaReserva = (""+this.cmbDia.getSelectedItem())+"-"+(""+this.cmbMes.getSelectedItem())+"-"+(""+this.cmbAno.getSelectedItem());
        Pacientes reserva = new Pacientes();
        
        reserva.setRut(this.txtRun.getText().trim());
        reserva.setDigitoVer(this.txtDigitoVer.getText().trim());
        reserva.setNombres(this.txtNombre.getText().trim());
        reserva.setApellidos(this.txtApellidos.getText().trim());
        reserva.setTelefono(Integer.parseInt(this.txtTelefono.getText().trim()));
        reserva.setEspecialidad((String)this.cmbEspecialidad.getSelectedItem());
        reserva.setNombreDoc((String)this.cmbMedico.getSelectedItem());
        reserva.setHora((String)this.cmbHoraReserva.getSelectedItem());
        reserva.setFechaReserva(fechaReserva);
        //reserva.setFechaReserva(fechaReserva);

        //Almacenar
        listado.add(reserva);
        
        //Validación correcta y mostrar mensaje
        JOptionPane.showMessageDialog(this, "Los datos han sido guardados correctamente",
                "Ingreso Correcto", JOptionPane.INFORMATION_MESSAGE);
    
}

    private void eliminarReserva() {
        
       for(int i = 0; i < listado.size();i++)
       {
           if(listado.get(i).getRut().equals(this.txtRun.getText().trim()))
           {
               listado.remove(i);
               break;
           }
       }
       
       JOptionPane.showMessageDialog(this, "Datos Borrados Exitosamente", "Confirmación", JOptionPane.OK_OPTION);
    }
    
    private boolean actualizarHora(){
        boolean siExisteHora = false;
       
    String fechaReserva = (""+this.cmbDia.getSelectedItem())+"-"+(""+this.cmbMes.getSelectedItem())+"-"+(""+this.cmbAno.getSelectedItem());
        for(int i = 0; i < listado.size();i++)
       {
           if(listado.get(i).getFechaReserva().equals(fechaReserva)&& 
                   (listado.get(i).getHora().equals(this.cmbHoraReserva.getSelectedItem()) &&
                   (listado.get(i).getNombreDoc().equals(this.cmbMedico.getSelectedItem()))))
           {
              String fechaEncontrada = listado.get(i).getFechaReserva();
              //System.out.println(fechaEncontrada);
              this.cmbHoraReserva.getSelectedIndex();
              
              siExisteHora = true;                    
           }
           break;
       }
       return siExisteHora;      
    }        
    
    private boolean siExisteReserva() {
        boolean siExiste = false;
        for(int c = 0; c <listado.size(); c++)
        {
            if(listado.get(c).getRut().equals(this.txtRun.getText().trim()))
            {
                siExiste = true;
            }
        }       
        return siExiste;
    }
    
    private void limpiar(){
        
        this.txtRun.setText("");
        this.txtDigitoVer.setText("");
        this.txtNombre.setText("");
        this.txtTelefono.setText("");
        this.txtApellidos.setText("");
        //this.jDatefecha.setDateFormatString("");
        this.txtfecha.setText("");
        this.cmbEspecialidad.setSelectedIndex(0);
        this.cmbHoraReserva.setSelectedIndex(0);
        this.cmbMedico.setSelectedIndex(0);
        
    }



}
